{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avidan.moshe\\\\Desktop\\\\Appleseeds\\\\Projects\\\\starw\\\\starw\\\\src\\\\Components\\\\Part2.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Part2() {\n  _s();\n\n  const [planets, setPlanets] = useState([]);\n\n  const getPlanets = async () => {\n    const response = await axios.get(`https://swapi.py4e.com/api/planets`);\n    let allPlanets = response.data.results;\n    filterWantedPlanets(allPlanets);\n  };\n\n  useEffect(() => {\n    getPlanets();\n  }, []);\n\n  function filterWantedPlanets(allPlanets) {\n    let filteredPlanets = [];\n    filteredPlanets = allPlanets.filter(planet => planet.population >= 200000 && planet.population <= 45000000000 && planet.rotation_period < 27);\n    setPlanets(filteredPlanets);\n    console.log(filteredPlanets);\n  } // const SVG_WIDTH = 400;\n  // const SVG_HEIGHT = 300;\n  // function App(){\n  //     const x0 = 50;\n  //     const xAxisLength = SVG_WIDTH - x0 * 2;\n  //     const y0 = 50;\n  //     const yAxisLength = SVG_HEIGHT - y0 * 2;\n  //     const xAxisY = y0 + yAxisLength;\n  //     const dataYMax = planets.reduce(\n  //         (acc, cur) => (cur > acc ? cur : acc),\n  //         -Infinity\n  //       );\n  //       const dataYMin = planets.reduce(\n  //         (acc, cur) => (cur > acc ? cur : acc),\n  //         Infinity\n  //       );\n  //       const dataYRange = dataYMax - dataYMin;\n  //       const numYTicks = 5;\n  //       const barPlotWidth = xAxisLength / planets.length;\n  //     return (\n  //         <svg width={SVG_WIDTH} height={SVG_HEIGHT}>\n  //           {/* X axis */}\n  //           <line\n  //             x1={x0}\n  //             y1={xAxisY}\n  //             x2={x0 + xAxisLength}\n  //             y2={xAxisY}\n  //             stroke=\"grey\"\n  //           />\n  //           <text x={x0 + xAxisLength + 5} y={xAxisY + 4}>\n  //             Planets\n  //           </text>\n  //           {/* Y axis */}\n  //           <line x1={x0} y1={y0} x2={x0} y2={y0 + yAxisLength} stroke=\"grey\" />\n  //         {Array.from({ length: numYTicks }).map((_, index) => {\n  //             const y = y0 + index * (yAxisLength / numYTicks);\n  //             const yValue = Math.round(dataYMax - index * (dataYRange / numYTicks));\n  //             return (\n  //             <g key={index}>\n  //                 <line x1={x0} y1={y} x2={x0 - 5} y2={y} stroke=\"grey\" />\n  //                 <text x={x0 - 5} y={y + 5} textAnchor=\"end\">\n  //                 {yValue}\n  //                 </text>\n  //             </g>\n  //             );\n  //         })}\n  //           <text x={x0} y={y0 - 8} textAnchor=\"middle\">\n  //             Population\n  //           </text>\n  //             {/* Bar plots */}\n  //             {/* {planets.map(([name, population], index) => {\n  //                 const x = x0 + index * barPlotWidth;\n  //                 const yRatio = (population - dataYMin) / dataYRange;\n  //                 const y = y0 + (1 - yRatio) * yAxisLength;\n  //                 const height = yRatio * yAxisLength;\n  //                 const sidePadding = 10;\n  //                 return (\n  //                 <g key={index}>\n  //                     <rect\n  //                     x={x + sidePadding / 2}\n  //                     y={y}\n  //                     width={barPlotWidth - sidePadding}\n  //                     height={height}\n  //                     />\n  //                     <text x={x + barPlotWidth / 2} y={xAxisY + 16} textAnchor=\"middle\">\n  //                     {name}\n  //                     </text>\n  //                 </g>\n  //                 );\n  //             })} */}\n  //         </svg>\n  //       );\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Part 2\", planets.map(planet => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [planet.name, \" \", planet.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 23\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Part2, \"von7Z1r3F3hAxnvSjQX44zZhN8s=\");\n\n_c = Part2;\nexport default Part2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Part2\");","map":{"version":3,"sources":["C:/Users/avidan.moshe/Desktop/Appleseeds/Projects/starw/starw/src/Components/Part2.jsx"],"names":["React","useState","useEffect","axios","Part2","planets","setPlanets","getPlanets","response","get","allPlanets","data","results","filterWantedPlanets","filteredPlanets","filter","planet","population","rotation_period","console","log","map","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMM,UAAU,GAAG,YAAU;AAEzB,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,oCAAX,CAAvB;AAEA,QAAIC,UAAU,GAAGF,QAAQ,CAACG,IAAT,CAAcC,OAA/B;AAEAC,IAAAA,mBAAmB,CAACH,UAAD,CAAnB;AACH,GAPD;;AASAR,EAAAA,SAAS,CAAC,MAAK;AAEXK,IAAAA,UAAU;AAEb,GAJQ,EAIN,EAJM,CAAT;;AAOA,WAASM,mBAAT,CAA6BH,UAA7B,EAAwC;AACpC,QAAII,eAAe,GAAG,EAAtB;AACAA,IAAAA,eAAe,GAAGJ,UAAU,CAACK,MAAX,CAAkBC,MAAM,IAAMA,MAAM,CAACC,UAAP,IAAqB,MAArB,IAA+BD,MAAM,CAACC,UAAP,IAAqB,WAArD,IAAsED,MAAM,CAACE,eAAP,GAAyB,EAA5H,CAAlB;AAEAZ,IAAAA,UAAU,CAACQ,eAAD,CAAV;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,eAAZ;AAEH,GA1BY,CA4Bb;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAMA,sBACI;AAAA,yBAOKT,OAAO,CAACgB,GAAR,CAAYL,MAAM,IAAI;AACpB,0BAAO;AAAA,mBAAMA,MAAM,CAACM,IAAb,OAAoBN,MAAM,CAACC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAGF,KAJA,CAPL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA5IQb,K;;KAAAA,K;AA8IT,eAAeA,KAAf","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nfunction Part2() {\r\n    const [planets, setPlanets] = useState([])\r\n\r\n    const getPlanets = async() =>{\r\n        \r\n        const response = await axios.get(`https://swapi.py4e.com/api/planets`)\r\n\r\n        let allPlanets = response.data.results\r\n\r\n        filterWantedPlanets(allPlanets)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        getPlanets()\r\n        \r\n    }, [])\r\n\r\n\r\n    function filterWantedPlanets(allPlanets){\r\n        let filteredPlanets = []\r\n        filteredPlanets = allPlanets.filter(planet => ((planet.population >= 200000 && planet.population <= 45000000000) && (planet.rotation_period < 27)))\r\n\r\n        setPlanets(filteredPlanets)\r\n        console.log(filteredPlanets)\r\n        \r\n    }\r\n\r\n    // const SVG_WIDTH = 400;\r\n    // const SVG_HEIGHT = 300;\r\n\r\n    // function App(){\r\n    //     const x0 = 50;\r\n    //     const xAxisLength = SVG_WIDTH - x0 * 2;\r\n\r\n    //     const y0 = 50;\r\n    //     const yAxisLength = SVG_HEIGHT - y0 * 2;\r\n\r\n    //     const xAxisY = y0 + yAxisLength;\r\n\r\n    //     const dataYMax = planets.reduce(\r\n    //         (acc, cur) => (cur > acc ? cur : acc),\r\n    //         -Infinity\r\n    //       );\r\n\r\n    //       const dataYMin = planets.reduce(\r\n    //         (acc, cur) => (cur > acc ? cur : acc),\r\n    //         Infinity\r\n    //       );\r\n    //       const dataYRange = dataYMax - dataYMin;\r\n        \r\n    //       const numYTicks = 5;\r\n        \r\n    //       const barPlotWidth = xAxisLength / planets.length;\r\n\r\n    //     return (\r\n    //         <svg width={SVG_WIDTH} height={SVG_HEIGHT}>\r\n    //           {/* X axis */}\r\n    //           <line\r\n    //             x1={x0}\r\n    //             y1={xAxisY}\r\n    //             x2={x0 + xAxisLength}\r\n    //             y2={xAxisY}\r\n    //             stroke=\"grey\"\r\n    //           />\r\n    //           <text x={x0 + xAxisLength + 5} y={xAxisY + 4}>\r\n    //             Planets\r\n    //           </text>\r\n        \r\n    //           {/* Y axis */}\r\n    //           <line x1={x0} y1={y0} x2={x0} y2={y0 + yAxisLength} stroke=\"grey\" />\r\n\r\n    //         {Array.from({ length: numYTicks }).map((_, index) => {\r\n    //             const y = y0 + index * (yAxisLength / numYTicks);\r\n\r\n    //             const yValue = Math.round(dataYMax - index * (dataYRange / numYTicks));\r\n\r\n    //             return (\r\n    //             <g key={index}>\r\n    //                 <line x1={x0} y1={y} x2={x0 - 5} y2={y} stroke=\"grey\" />\r\n    //                 <text x={x0 - 5} y={y + 5} textAnchor=\"end\">\r\n    //                 {yValue}\r\n    //                 </text>\r\n    //             </g>\r\n    //             );\r\n    //         })}\r\n\r\n    //           <text x={x0} y={y0 - 8} textAnchor=\"middle\">\r\n    //             Population\r\n    //           </text>\r\n\r\n    //             {/* Bar plots */}\r\n    //             {/* {planets.map(([name, population], index) => {\r\n    //                 const x = x0 + index * barPlotWidth;\r\n\r\n    //                 const yRatio = (population - dataYMin) / dataYRange;\r\n\r\n    //                 const y = y0 + (1 - yRatio) * yAxisLength;\r\n    //                 const height = yRatio * yAxisLength;\r\n\r\n    //                 const sidePadding = 10;\r\n\r\n    //                 return (\r\n    //                 <g key={index}>\r\n    //                     <rect\r\n    //                     x={x + sidePadding / 2}\r\n    //                     y={y}\r\n    //                     width={barPlotWidth - sidePadding}\r\n    //                     height={height}\r\n    //                     />\r\n    //                     <text x={x + barPlotWidth / 2} y={xAxisY + 16} textAnchor=\"middle\">\r\n    //                     {name}\r\n    //                     </text>\r\n    //                 </g>\r\n    //                 );\r\n    //             })} */}\r\n\r\n    //         </svg>\r\n    //       );\r\n    // }\r\n\r\n\r\n    \r\n\r\n    \r\n    return (\r\n        <div>\r\n            Part 2\r\n\r\n            {/* <App/> */}\r\n\r\n           \r\n\r\n            {planets.map(planet => {\r\n               return <div>{planet.name} {planet.population}\r\n               </div> \r\n               \r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Part2\r\n"]},"metadata":{},"sourceType":"module"}