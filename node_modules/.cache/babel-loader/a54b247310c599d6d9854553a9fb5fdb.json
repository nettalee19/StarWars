{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avidan.moshe\\\\Desktop\\\\Appleseeds\\\\Projects\\\\starw\\\\starw\\\\src\\\\Components\\\\Part1.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseEndpoint = `https://swapi.py4e.com/api`;\n\nfunction Part1() {\n  _s();\n\n  const [vehicles, setVehicles] = useState([]);\n  const [pilots, setPilots] = useState([]);\n  const [vehicle, setVehicle] = useState(null);\n  const [planet, setPlanet] = useState(null);\n  const [population, setPopulation] = useState(null);\n  const [pilot, setPilot] = useState(null);\n\n  const getVehicles = async () => {\n    const response = await axios.get(`${baseEndpoint}/vehicles`);\n    console.log(response.data.results);\n    setVehicles(response.data.results);\n  };\n\n  useEffect(() => {\n    getVehicles();\n  }, []);\n\n  async function planetsDetails(planetsAddress) {\n    let planetsDetails = [];\n\n    for (let i = 0; i < planetsAddress.length; i++) {\n      const response = await axios.get(`${planetsAddress[i]}`);\n      planetsDetails.push(response.data);\n    }\n\n    let planet1 = planetsDetails.reduce(function (prev, current) {\n      return prev.population > current.population ? prev : current;\n    });\n    let index = planetsDetails.reduce(function (prev, current, index) {\n      return prev.population > current.population ? index : index;\n    });\n    setPlanet(planet1.name);\n    setPopulation(planet1.population);\n    return planetsAddress[index];\n  }\n\n  async function getPlanet(pilotsDetailed) {\n    //console.log(pilotsDetailed)\n    let planetsAddress = [];\n\n    for (let i = 0; i < pilotsDetailed.length; i++) {\n      planetsAddress.push(pilotsDetailed[i].homeworld);\n    }\n\n    let mostPopulatedPlanetAddress = await planetsDetails(planetsAddress);\n    let thePilot = pilotsDetailed.find(pilot => pilot.homeworld === mostPopulatedPlanetAddress);\n    setPilot(thePilot.name);\n    const response = await axios.get(`${thePilot.vehicles}`);\n    console.log('-----');\n    console.log(response);\n    console.log('-----'); //console.log(thePilot.vehicles)\n    // return chosenAdress\n  }\n\n  async function getPilotsDetails(allPilots) {\n    //console.log(allPilots)\n    let pilotsDetailed = [];\n\n    for (let i = 0; i < allPilots.length; i++) {\n      const response = await axios.get(`${allPilots[i]}`);\n      pilotsDetailed.push(response.data);\n    } // console.log(pilotsDetailed)\n\n\n    getPlanet(pilotsDetailed);\n  } //get the pilots\n\n\n  function getPilots(vehiclesWithPilots) {\n    console.log(vehiclesWithPilots);\n    let allPilots = [];\n\n    for (let i = 0; i < vehiclesWithPilots.length; i++) {\n      if (vehiclesWithPilots[i].pilots.length > 1) {\n        for (let j = 0; j < vehiclesWithPilots[i].pilots.length; j++) {\n          allPilots.push(vehiclesWithPilots[i].pilots[j]);\n        }\n      } else {\n        allPilots.push(vehiclesWithPilots[i].pilots);\n      }\n    } //console.log(allPilots)\n\n\n    getPilotsDetails(allPilots);\n  } //find which vehicles are assigned with pilots\n\n\n  function findPilots(vehicles) {\n    let vehiclesWithPilots = [];\n    vehiclesWithPilots = vehicles.filter(vehicle => vehicle.pilots.length >= 1);\n    getPilots(vehiclesWithPilots);\n  }\n\n  findPilots(vehicles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Part 1:\", /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Vehicle name with the largest sum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: vehicle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Related home planets and their respective population\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [planet, \", \", population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Related pilot names\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: pilot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Part1, \"PjmtCpx6DhyxXvsu82ihuN87Ql8=\");\n\n_c = Part1;\nexport default Part1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Part1\");","map":{"version":3,"sources":["C:/Users/avidan.moshe/Desktop/Appleseeds/Projects/starw/starw/src/Components/Part1.jsx"],"names":["React","useState","useEffect","axios","baseEndpoint","Part1","vehicles","setVehicles","pilots","setPilots","vehicle","setVehicle","planet","setPlanet","population","setPopulation","pilot","setPilot","getVehicles","response","get","console","log","data","results","planetsDetails","planetsAddress","i","length","push","planet1","reduce","prev","current","index","name","getPlanet","pilotsDetailed","homeworld","mostPopulatedPlanetAddress","thePilot","find","getPilotsDetails","allPilots","getPilots","vehiclesWithPilots","j","findPilots","filter"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nconst baseEndpoint = `https://swapi.py4e.com/api`;\r\n\r\nfunction Part1() {\r\n\r\n    const [vehicles, setVehicles] = useState([])\r\n    const [pilots, setPilots] = useState([])\r\n\r\n    const [vehicle, setVehicle] =useState(null)\r\n    const [planet, setPlanet] = useState(null)\r\n    const [population, setPopulation] = useState(null)\r\n    const [pilot, setPilot] = useState(null)\r\n\r\n\r\n    const getVehicles = async() =>{\r\n        \r\n        const response = await axios.get(`${baseEndpoint}/vehicles`)\r\n        console.log(response.data.results)\r\n\r\n        setVehicles(response.data.results)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        getVehicles()\r\n    }, [])\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    async function planetsDetails(planetsAddress){\r\n        \r\n        let planetsDetails = []\r\n        for(let i = 0; i < planetsAddress.length; i++){\r\n\r\n            const response = await axios.get(`${planetsAddress[i]}`)\r\n\r\n            planetsDetails.push(response.data)\r\n        \r\n        }\r\n\r\n        let planet1 = planetsDetails.reduce(function(prev, current) {\r\n            return (prev.population > current.population) ? prev : current\r\n        })\r\n\r\n\r\n\r\n        let index = planetsDetails.reduce(function(prev, current, index) {\r\n            return (prev.population > current.population) ? index : index\r\n        })\r\n\r\n        setPlanet(planet1.name)\r\n        setPopulation(planet1.population)\r\n\r\n        return planetsAddress[index]\r\n    }\r\n\r\n\r\n\r\n    async function getPlanet (pilotsDetailed){\r\n        //console.log(pilotsDetailed)\r\n        let planetsAddress = []\r\n\r\n        for(let i = 0; i < pilotsDetailed.length; i++){\r\n            planetsAddress.push(pilotsDetailed[i].homeworld)\r\n        }\r\n        \r\n        let mostPopulatedPlanetAddress = await planetsDetails(planetsAddress)\r\n        \r\n\r\n        let thePilot = pilotsDetailed.find(pilot => pilot.homeworld === mostPopulatedPlanetAddress)\r\n\r\n        setPilot(thePilot.name)\r\n\r\n        const response = await axios.get(`${thePilot.vehicles}`)\r\n        console.log('-----')\r\n        console.log(response)\r\n        console.log('-----')\r\n        //console.log(thePilot.vehicles)\r\n    \r\n        // return chosenAdress\r\n    }\r\n\r\n\r\n    async function getPilotsDetails (allPilots){\r\n        //console.log(allPilots)\r\n        \r\n        let pilotsDetailed = []\r\n        for(let i = 0; i < allPilots.length; i++){\r\n\r\n            const response = await axios.get(`${allPilots[i]}`)\r\n\r\n            pilotsDetailed.push(response.data)\r\n            \r\n        }\r\n        \r\n\r\n        // console.log(pilotsDetailed)\r\n        \r\n         getPlanet(pilotsDetailed)\r\n\r\n\r\n     }\r\n\r\n\r\n\r\n\r\n    //get the pilots\r\n    function getPilots(vehiclesWithPilots){\r\n        console.log(vehiclesWithPilots)\r\n        \r\n        let allPilots = []\r\n\r\n\r\n        for(let i = 0; i < vehiclesWithPilots.length; i++){\r\n            if(vehiclesWithPilots[i].pilots.length > 1){\r\n                for(let j = 0; j < vehiclesWithPilots[i].pilots.length; j++){\r\n                    allPilots.push(vehiclesWithPilots[i].pilots[j])\r\n                    \r\n                }\r\n            }\r\n            else{\r\n                allPilots.push(vehiclesWithPilots[i].pilots);\r\n                \r\n            }\r\n\r\n        }\r\n\r\n        //console.log(allPilots)\r\n        getPilotsDetails(allPilots)\r\n\r\n    }\r\n\r\n    //find which vehicles are assigned with pilots\r\n    function findPilots(vehicles){\r\n        let vehiclesWithPilots = []\r\n        vehiclesWithPilots = vehicles.filter(vehicle => vehicle.pilots.length >= 1)\r\n        getPilots(vehiclesWithPilots)\r\n\r\n    }\r\n    findPilots(vehicles)\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            Part 1:\r\n            \r\n            <table>\r\n                <tr>\r\n                    <td>Vehicle name with the largest sum</td>\r\n                    <td>{vehicle}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Related home planets and their respective population</td>\r\n                    <td>{planet}, {population}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Related pilot names</td>\r\n                    <td>{pilot}</td>\r\n                </tr>\r\n            </table>\r\n            \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Part1\r\n"]},"metadata":{},"sourceType":"module"}