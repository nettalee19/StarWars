{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avidan.moshe\\\\Desktop\\\\Appleseeds\\\\Projects\\\\starw\\\\starw\\\\src\\\\Components\\\\Part2.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Part2() {\n  _s();\n\n  const [planets, setPlanets] = useState([]);\n\n  const getPlanets = async () => {\n    const response = await axios.get(`https://swapi.py4e.com/api/planets`);\n    console.log(response.data.results);\n    filterWantedPlanets(response.data.results); //setPlanets(response.data.results)\n  };\n\n  useEffect(() => {\n    getPlanets();\n  }, []);\n\n  function filterWantedPlanets(planets) {\n    let filteredPlanets = [];\n    filteredPlanets = planets.filter(planet => planet.population >= 200000 && planet.population <= 45000000000 && planet.rotation_period < 27);\n    console.log(filteredPlanets);\n    setPlanets(filteredPlanets); //setwantedPlanets(filteredPlanets)\n    // let wantedData = []\n    // filteredPlanets.forEach(planet =>{\n    //     wantedData.push(planet.name, planet.population)\n    //     wantedData.push(planet.population)\n    // })\n    // console.log(wantedData)\n  } //filterWantedPlanets(planets)\n\n\n  const Chart = _ref => {\n    let {\n      children,\n      height,\n      width\n    } = _ref;\n\n    /*#__PURE__*/\n    _jsxDEV(\"svg\", {\n      viewBox: `0 0 ${width} ${height}`,\n      height: height,\n      width: width,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this);\n  };\n\n  const Bar = _ref2 => {\n    let {\n      x,\n      y,\n      height,\n      width\n    } = _ref2;\n\n    /*#__PURE__*/\n    _jsxDEV(\"rect\", {\n      x: x,\n      y: y,\n      height: height,\n      width: width\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this);\n  };\n\n  const greatestValue = values => {\n    values.reduce((acc, cur) => cur > acc ? cur : acc, -Infinity);\n  };\n\n  const BarChart = planets => {\n    const barWidth = 20;\n    const barMaergin = 5; // const width = planets.length *(barWidth + barMaergin)\n\n    const width = barWidth + barMaergin;\n    const height = greatestValue(planets.map(planet => planet.population));\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      height: height,\n      width: width,\n      children: planets.map((datum, index) => {\n        /*#__PURE__*/\n        _jsxDEV(Bar, {\n          x: index * (barWidth + barMaergin),\n          y: 0,\n          width: barWidth,\n          height: datum.population\n        }, datum.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"this is part 2\", /*#__PURE__*/_jsxDEV(BarChart, {\n      data: planets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), planets.map(planet => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [planet.name, \" \", planet.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 23\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Part2, \"von7Z1r3F3hAxnvSjQX44zZhN8s=\");\n\n_c = Part2;\nexport default Part2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Part2\");","map":{"version":3,"sources":["C:/Users/avidan.moshe/Desktop/Appleseeds/Projects/starw/starw/src/Components/Part2.jsx"],"names":["React","useState","useEffect","axios","Part2","planets","setPlanets","getPlanets","response","get","console","log","data","results","filterWantedPlanets","filteredPlanets","filter","planet","population","rotation_period","Chart","children","height","width","Bar","x","y","greatestValue","values","reduce","acc","cur","Infinity","BarChart","barWidth","barMaergin","map","datum","index","name"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nfunction Part2() {\r\n    const [planets, setPlanets] = useState([])\r\n\r\n    const getPlanets = async() =>{\r\n        \r\n        const response = await axios.get(`https://swapi.py4e.com/api/planets`)\r\n        console.log(response.data.results)\r\n\r\n        filterWantedPlanets(response.data.results)\r\n        //setPlanets(response.data.results)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        getPlanets()\r\n        \r\n    }, [])\r\n\r\n\r\n    function filterWantedPlanets(planets){\r\n        let filteredPlanets = []\r\n        filteredPlanets = planets.filter(planet => ((planet.population >= 200000 && planet.population <= 45000000000) && (planet.rotation_period < 27)))\r\n        console.log(filteredPlanets)\r\n\r\n        setPlanets(filteredPlanets)\r\n        //setwantedPlanets(filteredPlanets)\r\n        \r\n        // let wantedData = []\r\n        // filteredPlanets.forEach(planet =>{\r\n        //     wantedData.push(planet.name, planet.population)\r\n        //     wantedData.push(planet.population)\r\n        // })\r\n        // console.log(wantedData)\r\n    }\r\n    //filterWantedPlanets(planets)\r\n\r\n    const Chart = ({ children, height, width}) =>{\r\n        <svg viewBox={`0 0 ${width} ${height}`}\r\n        height ={height}\r\n        width = {width}\r\n        >\r\n                {children}\r\n\r\n        </svg>\r\n    }\r\n\r\n    const Bar = ({x, y, height, width}) =>{\r\n        <rect x={x} y={y} height={height} width={width}/>\r\n    }\r\n\r\n    const greatestValue = (values) =>{\r\n        values.reduce( (acc, cur) => (cur > acc ? cur : acc), -Infinity)\r\n    }\r\n\r\n    const BarChart = (planets) =>{\r\n        const barWidth =20\r\n        const barMaergin = 5\r\n        // const width = planets.length *(barWidth + barMaergin)\r\n        const width = (barWidth + barMaergin)\r\n        const height = greatestValue(planets.map(planet => planet.population))\r\n        \r\n        return (\r\n            <Chart\r\n            height={height}\r\n            width={width}\r\n            >\r\n                {planets.map((datum, index) =>{\r\n                    <Bar\r\n                    key={datum.name}\r\n                    x = {index *(barWidth + barMaergin)}\r\n                    y = {0} \r\n                    width={barWidth}\r\n                    height={datum.population}\r\n                    />\r\n                })}\r\n            </Chart>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            this is part 2\r\n\r\n            <BarChart data={planets}/>\r\n\r\n            {planets.map(planet => {\r\n               return <div>{planet.name} {planet.population}\r\n               </div> \r\n               \r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Part2\r\n"]},"metadata":{},"sourceType":"module"}