{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avidan.moshe\\\\Desktop\\\\Appleseeds\\\\Projects\\\\starw\\\\starw\\\\src\\\\Components\\\\Part1.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseEndpoint = `https://swapi.py4e.com/api`; //const usersEndpoint = `${baseEndpoint}/people`;\n//const plenetEndpoint = `${baseEndpoint}/planets`;\n\nfunction Part1() {\n  _s();\n\n  const [vehicles, setVehicles] = useState([]);\n  const [pilots, setPilots] = useState([]);\n  const [vehicle, setVehicle] = useState(null);\n  const [planet, setPlanet] = useState(null);\n  const [population, setPopulation] = useState(null);\n  const [pilot, setPilot] = useState(null);\n\n  const getVehicles = async () => {\n    const response = await axios.get(`${baseEndpoint}/vehicles`);\n    console.log(response.data.results);\n    setVehicles(response.data.results);\n  };\n\n  useEffect(() => {\n    getVehicles();\n  }, []);\n\n  async function getPlanet(pilotPlanet) {\n    const response = await axios.get(`${pilotPlanet}`);\n    console.log(response.data);\n    setPlanet(response.data.name);\n    setPopulation(response.data.population);\n  }\n\n  async function getPilotsDetails(allPilots) {\n    let pilotsDetailed = [];\n\n    for (let i = 0; i < allPilots.length; i++) {\n      //console.log(allPilots[i])\n      pilotsDetailed.push(allPilots[i]); // const response = await axios.get(`${allPilots[i]}`)\n      // console.log(response)\n      // pilotsDetailed.push(response)\n    }\n\n    console.log(pilotsDetailed); // const response = await axios.get(`${allPilots[1][0]}`)\n    // console.log(response.data.homeworld)\n    // console.log(response.data.name)\n    // setPilot(response.data.name)\n    // let pilotPlanet = response.data.homeworld\n    // getPlanet(pilotPlanet)\n    // const response2 = await axios.get(`${response.data.homeworld}`)\n    // console.log(response2.data)\n    //setPlanet(response2.data)\n    //console.log(planet.name)\n    // const response = await axios.get(`${allPilots[1]}`)\n    // console.log(response.data.homeworld)\n    // const response2 = await axios.get(`${response.data.homeworld}`)\n    // console.log(response2.data.population)\n  } // const getPilotsDetails = async(allPilots) =>{\n  //     const response = await axios.get(pilot)\n  //     allPilots.forEach(pilot =>{\n  //     })\n  // }\n  //get the pilots\n\n\n  function getPilots(vehiclesWithPilots) {\n    //console.log(vehiclesWithPilots)\n    let allPilots = []; // vehiclesWithPilots.forEach(vehicle =>{\n    //     allPilots.push(vehicle.pilots)\n    // })\n\n    for (let i = 0; i < vehiclesWithPilots.length; i++) {\n      if (vehiclesWithPilots[i].pilots.length > 1) {\n        for (let j = 0; j < vehiclesWithPilots[i].pilots.length; j++) {\n          allPilots.push(vehiclesWithPilots[i].pilots[j]);\n        }\n      } else {\n        allPilots.push(vehiclesWithPilots[i].pilots);\n      } //allPilots.push(vehiclesWithPilots[i].population);\n\n    }\n\n    console.log(allPilots);\n    getPilotsDetails(allPilots);\n  } //find which vehicles are assigned with pilots\n\n\n  function findPilots(vehicles) {\n    let vehiclesWithPilots = [];\n    vehiclesWithPilots = vehicles.filter(vehicle => vehicle.pilots.length >= 1);\n    getPilots(vehiclesWithPilots);\n  }\n\n  findPilots(vehicles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Part 1:\", /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Vehicle name with the largest sum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Vehicle name with the largest sum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Related home planets and their respective population\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [planet, \", \", population]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Related pilot names\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: pilot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Part1, \"PjmtCpx6DhyxXvsu82ihuN87Ql8=\");\n\n_c = Part1;\nexport default Part1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Part1\");","map":{"version":3,"sources":["C:/Users/avidan.moshe/Desktop/Appleseeds/Projects/starw/starw/src/Components/Part1.jsx"],"names":["React","useState","useEffect","axios","baseEndpoint","Part1","vehicles","setVehicles","pilots","setPilots","vehicle","setVehicle","planet","setPlanet","population","setPopulation","pilot","setPilot","getVehicles","response","get","console","log","data","results","getPlanet","pilotPlanet","name","getPilotsDetails","allPilots","pilotsDetailed","i","length","push","getPilots","vehiclesWithPilots","j","findPilots","filter"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nconst baseEndpoint = `https://swapi.py4e.com/api`;\r\n//const usersEndpoint = `${baseEndpoint}/people`;\r\n//const plenetEndpoint = `${baseEndpoint}/planets`;\r\n\r\nfunction Part1() {\r\n\r\n    const [vehicles, setVehicles] = useState([])\r\n    const [pilots, setPilots] = useState([])\r\n\r\n    const [vehicle, setVehicle] =useState(null)\r\n    const [planet, setPlanet] = useState(null)\r\n    const [population, setPopulation] = useState(null)\r\n    const [pilot, setPilot] = useState(null)\r\n\r\n    const getVehicles = async() =>{\r\n        \r\n        const response = await axios.get(`${baseEndpoint}/vehicles`)\r\n        console.log(response.data.results)\r\n\r\n        setVehicles(response.data.results)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        getVehicles()\r\n        \r\n    }, [])\r\n\r\n\r\n    async function getPlanet(pilotPlanet){\r\n        \r\n        const response = await axios.get(`${pilotPlanet}`)\r\n        console.log(response.data)\r\n        setPlanet(response.data.name)\r\n        setPopulation(response.data.population)\r\n        \r\n    }\r\n\r\n\r\n    async function getPilotsDetails (allPilots){\r\n        let pilotsDetailed = []\r\n        for(let i = 0; i < allPilots.length; i++){\r\n            //console.log(allPilots[i])\r\n\r\n            pilotsDetailed.push(allPilots[i])\r\n            // const response = await axios.get(`${allPilots[i]}`)\r\n            // console.log(response)\r\n            // pilotsDetailed.push(response)\r\n        }\r\n        console.log(pilotsDetailed)\r\n\r\n        // const response = await axios.get(`${allPilots[1][0]}`)\r\n        // console.log(response.data.homeworld)\r\n        // console.log(response.data.name)\r\n        // setPilot(response.data.name)\r\n\r\n        // let pilotPlanet = response.data.homeworld\r\n        // getPlanet(pilotPlanet)\r\n        \r\n        // const response2 = await axios.get(`${response.data.homeworld}`)\r\n        // console.log(response2.data)\r\n\r\n        //setPlanet(response2.data)\r\n        //console.log(planet.name)\r\n\r\n        // const response = await axios.get(`${allPilots[1]}`)\r\n        // console.log(response.data.homeworld)\r\n        \r\n        // const response2 = await axios.get(`${response.data.homeworld}`)\r\n        // console.log(response2.data.population)\r\n    }\r\n\r\n    // const getPilotsDetails = async(allPilots) =>{\r\n    //     const response = await axios.get(pilot)\r\n    //     allPilots.forEach(pilot =>{\r\n    //     })\r\n    // }\r\n\r\n\r\n    //get the pilots\r\n    function getPilots(vehiclesWithPilots){\r\n        //console.log(vehiclesWithPilots)\r\n        let allPilots = []\r\n\r\n        // vehiclesWithPilots.forEach(vehicle =>{\r\n        //     allPilots.push(vehicle.pilots)\r\n        // })\r\n\r\n        for(let i = 0; i < vehiclesWithPilots.length; i++){\r\n            if(vehiclesWithPilots[i].pilots.length > 1){\r\n                for(let j = 0; j < vehiclesWithPilots[i].pilots.length; j++){\r\n                    allPilots.push(vehiclesWithPilots[i].pilots[j])\r\n                }\r\n            }\r\n            else{\r\n                allPilots.push(vehiclesWithPilots[i].pilots);\r\n            }\r\n            \r\n            //allPilots.push(vehiclesWithPilots[i].population);\r\n        }\r\n\r\n        console.log(allPilots)\r\n        getPilotsDetails(allPilots)\r\n\r\n    }\r\n\r\n    //find which vehicles are assigned with pilots\r\n    function findPilots(vehicles){\r\n        let vehiclesWithPilots = []\r\n        vehiclesWithPilots = vehicles.filter(vehicle => vehicle.pilots.length >= 1)\r\n        getPilots(vehiclesWithPilots)\r\n        \r\n    }\r\n    findPilots(vehicles)\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            Part 1:\r\n            \r\n            <table>\r\n                <tr>\r\n                    <td>Vehicle name with the largest sum</td>\r\n                    <td>Vehicle name with the largest sum</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Related home planets and their respective population</td>\r\n                    <td>{planet}, {population}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Related pilot names</td>\r\n                    <td>{pilot}</td>\r\n                </tr>\r\n            </table>\r\n            \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Part1\r\n"]},"metadata":{},"sourceType":"module"}