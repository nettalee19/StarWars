{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avidan.moshe\\\\Desktop\\\\Appleseeds\\\\Projects\\\\starw\\\\starw\\\\src\\\\Components\\\\Part2.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Part2() {\n  _s();\n\n  const [planets, setPlanets] = useState([]);\n\n  const getPlanets = async () => {\n    const response = await axios.get(`https://swapi.py4e.com/api/planets`);\n    let allPlanets = response.data.results;\n    filterWantedPlanets(allPlanets);\n  };\n\n  useEffect(() => {\n    getPlanets();\n  }, []);\n\n  function filterWantedPlanets(allPlanets) {\n    let filteredPlanets = [];\n    filteredPlanets = allPlanets.filter(planet => planet.population >= 200000 && planet.population <= 45000000000 && planet.rotation_period < 27);\n    setPlanets(filteredPlanets);\n    console.log(planets);\n  }\n\n  const Chart = _ref => {\n    let {\n      children,\n      width,\n      height\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      viewBox: `0 0 ${width} ${height}`,\n      width: width,\n      height: height,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  };\n\n  const Bar = _ref2 => {\n    let {\n      x,\n      y,\n      width,\n      height\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  };\n\n  const BarChart = _ref3 => {\n    let {\n      data\n    } = _ref3;\n    console.log(data); // Width of each bar\n\n    const itemWidth = 20; // Distance between each bar\n\n    const itemMargin = 5;\n    const dataLength = data.length; // Normalize data, we'll reduce all sizes to 25% of their original value\n\n    const massagedData = data.map(datum => Object.assign({}, datum, {\n      repos: datum.repos * 0.25\n    }));\n    const mostRepos = massagedData.reduce((acc, cur) => {\n      const {\n        repos\n      } = cur;\n      return repos > acc ? repos : acc;\n    }, 0);\n    const chartHeight = mostRepos;\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      width: dataLength * (itemWidth + itemMargin),\n      height: chartHeight,\n      children: massagedData.map((datum, index) => {\n        const itemHeight = datum.repos;\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          x: index * (itemWidth + itemMargin),\n          y: chartHeight - itemHeight,\n          width: itemWidth,\n          height: itemHeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"this is part 2\", /*#__PURE__*/_jsxDEV(BarChart, {\n      data: planets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), planets.map(planet => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [planet.name, \" \", planet.population]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 23\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Part2, \"von7Z1r3F3hAxnvSjQX44zZhN8s=\");\n\n_c = Part2;\nexport default Part2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Part2\");","map":{"version":3,"sources":["C:/Users/avidan.moshe/Desktop/Appleseeds/Projects/starw/starw/src/Components/Part2.jsx"],"names":["React","useState","useEffect","axios","Part2","planets","setPlanets","getPlanets","response","get","allPlanets","data","results","filterWantedPlanets","filteredPlanets","filter","planet","population","rotation_period","console","log","Chart","children","width","height","Bar","x","y","BarChart","itemWidth","itemMargin","dataLength","length","massagedData","map","datum","Object","assign","repos","mostRepos","reduce","acc","cur","chartHeight","index","itemHeight","name"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport axios from \"axios\"\r\n\r\nfunction Part2() {\r\n    const [planets, setPlanets] = useState([])\r\n\r\n    const getPlanets = async() =>{\r\n        \r\n        const response = await axios.get(`https://swapi.py4e.com/api/planets`)\r\n\r\n        let allPlanets = response.data.results\r\n\r\n        filterWantedPlanets(allPlanets)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        getPlanets()\r\n        \r\n    }, [])\r\n\r\n\r\n    function filterWantedPlanets(allPlanets){\r\n        let filteredPlanets = []\r\n        filteredPlanets = allPlanets.filter(planet => ((planet.population >= 200000 && planet.population <= 45000000000) && (planet.rotation_period < 27)))\r\n\r\n        setPlanets(filteredPlanets)\r\n        console.log(planets)\r\n        \r\n    }\r\n\r\n    const Chart = ({ children, width, height }) => (\r\n        <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\r\n          {children}\r\n        </svg>\r\n      )\r\n      \r\n      const Bar = ({ x, y, width, height }) => (\r\n        <rect x={x} y={y} width={width} height={height} />\r\n      )\r\n    \r\n      const BarChart = ({ data }) => {\r\n          console.log(data)\r\n        // Width of each bar\r\n        const itemWidth = 20\r\n      \r\n        // Distance between each bar\r\n        const itemMargin = 5\r\n      \r\n        const dataLength = data.length\r\n      \r\n        // Normalize data, we'll reduce all sizes to 25% of their original value\r\n        const massagedData = data.map(datum =>\r\n          Object.assign({}, datum, { repos: datum.repos * 0.25 })\r\n        )\r\n      \r\n        const mostRepos = massagedData.reduce((acc, cur) => {\r\n          const { repos } = cur\r\n          return repos > acc ? repos : acc\r\n        }, 0)\r\n      \r\n        const chartHeight = mostRepos\r\n      \r\n        return (\r\n          <Chart width={dataLength * (itemWidth + itemMargin)} height={chartHeight}>\r\n            {massagedData.map((datum, index) => {\r\n                const itemHeight = datum.repos\r\n\r\n                return (\r\n                    <Bar\r\n                      x={index * (itemWidth + itemMargin)}\r\n                      y={chartHeight - itemHeight}\r\n                      width={itemWidth}\r\n                      height={itemHeight}\r\n                    />\r\n\r\n                )\r\n            })}\r\n          </Chart>\r\n        )\r\n      }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            this is part 2\r\n\r\n            <BarChart data={planets}/>\r\n\r\n            {planets.map(planet => {\r\n               return <div>{planet.name} {planet.population}\r\n               </div> \r\n               \r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Part2\r\n"]},"metadata":{},"sourceType":"module"}